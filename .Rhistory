# extract data for variables according to indices
# make start indices in right dimension,
ivars <- expand.grid(vars, ilayer, ilocation, itimestep)
ivars
names(ivars) <- c("variable", "layer", "location", "time1")
View(ivars)
# and number of data steps to retrieve in each dimension (-1 for all data in dimension)
ivars.list <- split(ivars, seq(nrow(ivars))) %>% map(unlist)
ivars.list
split(ivars, seq(nrow(ivars)))
# and number of data steps to retrieve in each dimension (-1 for all data in dimension)
ivars.list <- split(ivars, seq(nrow(ivars))) %>% map_chr(unlist)
# and number of data steps to retrieve in each dimension (-1 for all data in dimension)
ivars.list <- split(ivars, seq(nrow(ivars))) %>% map(unlist)
View(ivars.list)
ivars.list <- split(ivars, seq(nrow(ivars)))
View(ivars.list)
class(vars)
# extract data for variables according to indices
# make start indices in right dimension,
ivars <- expand.grid(vars, ilayer, ilocation, itimestep)
ivars
names(ivars) <- c("variable", "layer", "location", "time1")
ivars
# extract data for variables according to indices
# make start indices in right dimension,
ivars <- expand.grid(as.character(vars), ilayer, ilocation, itimestep)
names(ivars) <- c("variable", "layer", "location", "time1")
# and number of data steps to retrieve in each dimension (-1 for all data in dimension)
ivars.list <- split(ivars, seq(nrow(ivars))) %>% map(unlist)
ivars.list
# extract data for variables according to indices
# make start indices in right dimension,
ivars <- expand.grid(as.character(vars), ilayer, ilocation, itimestep)
class(ivars)
# extract data for variables according to indices
# make start indices in right dimension,
ivars <- expand.grid(as.character(vars), ilayer, ilocation, itimestep) %>% as.character
ivars
# extract data for variables according to indices
# make start indices in right dimension,
ivars <- expand.grid(as.character(vars), ilayer, ilocation, itimestep)
names(ivars) <- c("variable", "layer", "location", "time1")
# extract data for variables according to indices
# make start indices in right dimension,
ivars <- expand.grid(as.character(vars), ilayer, ilocation, itimestep)
names(ivars) <- c("variable", "layer", "location", "time1")
ivars$variable <- as.character(ivars$variable)
ivars.list <- split(ivars, seq(nrow(ivars))) %>% map(unlist)
ivars.list
names(ivars.list) <- station_id
ivars.list
station_id
ivars.list <- split(ivars, seq(nrow(ivars))) %>% map(unlist)
ivars.list
# extract data for variables according to indices
# make start indices in right dimension,
# and number of data steps to retrieve in each dimension (-1 for all data in dimension)
ivars <- expand.grid(vars, ilayer, ilocation, itimestep)
names(ivars) <- c("variable", "layer", "location", "time1")
ivars$variable <- as.character(ivars$variable)
ivars.list <- split(ivars, seq(nrow(ivars))) %>% map(unlist)
ivars.list
# extract data for variables according to indices
# make start indices in right dimension,
# and number of data steps to retrieve in each dimension (-1 for all data in dimension)
ivars <- expand.grid(vars, station_id, ilayer, ilocation, itimestep)
ivars
# extract data for variables according to indices
# make start indices in right dimension,
# and number of data steps to retrieve in each dimension (-1 for all data in dimension)
ivars <- expand.grid(vars, ilayer, ilocation, itimestep)
ivars
names(ivars) <- c("variable", "layer", "location", "time1")
ivars$variable <- as.character(ivars$variable)
ivars.list <- split(ivars, seq(nrow(ivars))) %>% map(unlist)
expand.grid(vars, station_id)
expand.grid(vars, station_id) %>% mutate(name = paste(Var1, Var2)) %>% select(name)
expand.grid(vars, station_id) %>% mutate(name = paste(Var1, Var2, "_")) %>% select(name)
expand.grid(vars, station_id) %>% mutate(name = paste(Var1, Var2, sep = "_")) %>% select(name)
names <- expand.grid(vars, station_id) %>% mutate(name = paste(Var1, Var2, sep = "_")) %>% select(name)
ivars.list <- split(ivars, seq(nrow(ivars))) %>% map(unlist)
names(ivars.list) = names
ivars.list
names <- expand.grid(vars, station_id) %>% mutate(name = paste(Var1, Var2, sep = "_")) %>% select(name)
names
names <- expand.grid(vars, station_id) %>% mutate(name = paste(Var1, Var2, sep = "_")) %>% select(name) %>% unlist()
names
ivars.list <- split(ivars, seq(nrow(ivars))) %>% map(unlist)
names(ivars.list) = names
ivars.list
map(ivars.list, vars, ~ ncdf4::ncvar_get(nc, .x$variable, start = unlist(c(.x$layer, .x$location, .x$time1)), count = c(1, 1, -1)))
# combn <- cross2(ivars.list, vars)
map(ivars.list, ~ paste(.x))
# combn <- cross2(ivars.list, vars)
map(ivars.list, ~ paste(.x$variable))
# combn <- cross2(ivars.list, vars)
map(ivars.list, ~ paste(.x["variable"]))
map(ivars.list, vars, ~ ncdf4::ncvar_get(nc, .x["variable"], start = unlist(c(.x["layer"], .x["location"], .x["time1"])), count = c(1, 1, -1)))
# combn <- cross2(ivars.list, vars)
map(ivars.list, ~ paste(.x["variable"], .x["layer"]))
# combn <- cross2(ivars.list, vars)
map(ivars.list, ~ paste(.x["variable"], .x["layer"], .x["location"], x["time1"]))
# combn <- cross2(ivars.list, vars)
map(ivars.list, ~ paste(.x["variable"], .x["layer"], .x["location"], .x["time1"]))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x["variable"], start = unlist(c(.x["layer"], .x["location"], .x["time1"])), count = c(1, 1, -1)))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x["variable"], start = c(.x["layer"], .x["location"], .x["time1"]), count = c(1, 1, -1)))
# combn <- cross2(ivars.list, vars)
map(ivars.list, ~ c(.x["layer"], .x["location"], .x["time1"]))
# combn <- cross2(ivars.list, vars)
map(ivars.list, ~ unname(c(.x["layer"], .x["location"], .x["time1"])))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x["variable"], start = unname(c(.x["layer"], .x["location"], .x["time1"])), count = c(1, 1, -1)))
lapply(vars, function(x) ncdf4::ncvar_get(nc, x, start = unlist(ivars[1,]), count = c(1, 1, -1)))
ncvar_get(nc, "NO3", start = c(1,1,1), count = c(1,1,-1)) %>% dim()
lapply(vars, function(x) ncvar_get(nc, x, start = c(1,1,1), count = c(1,1,-1)))
# combn <- cross2(ivars.list, vars)
map(ivars.list, ~ unname(c(.x["layer"], .x["location"], .x["time1"])))
lapply(ivars.list, function(x) ncdf4::ncvar_get(nc, x["variable"], start = unname(c(x["layer"], x["location"], x["time1"])), count = c(1, 1, -1)))
class(ivars.list[[1]])
# extract data for variables according to indices
# make start indices in right dimension,
# and number of data steps to retrieve in each dimension (-1 for all data in dimension)
ivars <- expand.grid(vars, ilayer, ilocation, itimestep)
names(ivars) <- c("variable", "layer", "location", "time1")
ivars$variable <- as.character(ivars$variable)
names <- expand.grid(vars, station_id) %>% mutate(name = paste(Var1, Var2, sep = "_")) %>% select(name) %>% unlist()
names
ivars.list <- split(ivars, seq(nrow(ivars))) %>% map(unlist)
ivars.list
ivars.list <- split(ivars, seq(nrow(ivars)))
ivars.list
names(ivars.list) = names
ivars.list
lapply(ivars.list, function(x) ncdf4::ncvar_get(nc, x["variable"], start = unname(c(x["layer"], x["location"], x["time1"])), count = c(1, 1, -1)))
# combn <- cross2(ivars.list, vars)
map(ivars.list, ~ unname(c(.x["layer"], .x["location"], .x["time1"])))
View(ivars.list)
# combn <- cross2(ivars.list, vars)
map(ivars.list, ~ unname(c(.x$layer, .x["location"], .x["time1"])))
# combn <- cross2(ivars.list, vars)
map(ivars.list, ~ c(.x$layer))
# combn <- cross2(ivars.list, vars)
map(ivars.list, ~ c(.x$layer, .x$location))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1)))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows()
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>%
gather()
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>%
gather(key = varloc, value = value) %>%
# make list with
# location metadata
# data
# perhaps also model version etc?
}
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>%
gather(key = "varloc", value = "value") %>%
# make list with
# location metadata
# data
# perhaps also model version etc?
}
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>%
gather(key = "varloc", value = "value") %>%
# make list with
# location metadata
# data
# perhaps also model version etc?
}
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>%
gather(key = "varloc", value = "value")
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>%
gather(key = varloc, value = value)
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>%
gather(key = varloc, value = value) %>% separate(varloc, "variable", "location")
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>%
gather(key = varloc, value = value) %>% separate(varloc, c("variable", "location"), sep = "_")
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1)))
bind_rows()
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1)))
bind_rows() %>%
gather(key = varloc, value = value)
bind_rows() %>%
gather(key = varloc, value = value) %>% View
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1)))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>%
gather(key = varloc, value = value) %>% View()
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% View()
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>%
mutate(timestep = nrow(.))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>%
bind_rows(1:nrow(.))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>%
bind_cols(1:nrow(.))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>%
bind_cols(1:nrow)
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>%
mutate(timestep = rownames_to_column())
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>%
mutate(timestep = rownames_to_column(.))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>%
rownames_to_column(.)
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>%
rownames_to_column(.) %>% rename(timestep = rowname)
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>%
rownames_to_column(.) %>% rename(timestep = rowname) %>%
gather(key = varloc, value = value) %>%
separate(varloc, c("variable", "location"), sep = "_")
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>%
rownames_to_column(.) %>% rename(timestep = rowname)
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>%
rownames_to_column(.) %>% rename(timestep = rowname) %>%
gather(key = varloc, value = value, -timestep) %>%
separate(varloc, c("variable", "location"), sep = "_")
View(nc)
ncvar_get(nc, "time") %>% dim()
ncvar_get(nc, "time")
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times)
times <- ncvar_get(nc, "time")
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times)
times <- as_tibble(timestep = ncvar_get(nc, "time"))
times <- tibble(timestep = ncvar_get(nc, "time"))
times
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times)
View(nc)
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as_datetime(timestep, origin = "1995-12-25 00:00:00"))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as_date(timestep, origin = "1995-12-25 00:00:00"))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as_datetime(timestep, origin = "1995-12-25 00:00:00"))
lubridate::origin
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as_datetime(timestep, origin = as_datetime("1995-12-25 00:00:00")))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as_datetime(timestep, origin = as_datetime("1995-12-25 00:00:00")))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as_datetime(timestep, origin = as_date("1995-12-25 00:00:00")))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as_date(timestep, origin = as_date("1995-12-25 00:00:00")))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as_datetime(timestep, "%S", origin = as_date("1995-12-25 00:00:00")))
as_date("1995-12-25 00:00:00")
as_datetime("1995-12-25 00:00:00")
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as_datetime(timestep, "%S"))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as_datetime(timestep, "%S", origin = as_datetime("1995-12-25 00:00:00")))
as_datetime("1995-12-25 00:00:00")
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as_datetime(timestep, "%S", origin = "1995-12-25 UTC"'))
rownames_to_column(.) %>% rename(timestep = rowname) %>%
gather(key = varloc, value = value, -timestep) %>%
separate(varloc, c("variable", "location"), sep = "_")
# make list with
# location metadata
# data
# perhaps also model version etc?
}
as_datetime("1995-12-25 00:00:00")
#test
con <- "p:/11204882-002-interreg-wadden-sea/simulations/A07_waq_normal_e3_2006_new_obs/DFM_OUTPUT_DCSM-FM_0_5nm_waq/DCSM-FM_0_5nm_waq_0000_his.nc"
nc <- ncdf4::nc_open(con)
vars = c("NO3", "NH4")
station_id = c("NOORDWK20", "NOORDWK70")
layer = 1
start = 1
end = NULL
ncvar_get(nc, "NO3", start = c(1,1,1), count = c(1,1,-1)) %>% dim()
ncvar_get(nc, "time")
lapply(vars, function(x) ncvar_get(nc, x, start = c(1,1,1), count = c(1,1,-1)))
#
dff <- nc_his2df(nc, vars, station_id, layer)
class(station_id)
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as_datetime(timestep, "%S", origin = "1995-12-25 UTC"))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as_datetime(timestep, "%S", origin = "1995-12-25 UTC"))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as.POSIXct(timestep, origin = '1995-12-25',tz='UTC')) #   as_datetime(timestep, "%S", origin = "1995-12-25 UTC"))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as.POSIXct(timestep, origin = '1995-12-25',tz='UTC')) %>%
rownames_to_column(.) %>% rename(timestep = rowname) %>%
gather(key = varloc, value = value, -timestep) %>%
separate(varloc, c("variable", "location"), sep = "_")
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as.POSIXct(timestep, origin = '1995-12-25',tz='UTC'))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as.POSIXct(timestep, origin = '1995-12-25',tz='UTC')) %>% select(-timestep) %>%
rownames_to_column(.) %>%
gather(key = varloc, value = value, -datetime) %>%
separate(varloc, c("variable", "location"), sep = "_")
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as.POSIXct(timestep, origin = '1995-12-25',tz='UTC')) %>% select(-timestep) %>%
rownames_to_column(.)
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as.POSIXct(timestep, origin = '1995-12-25',tz='UTC')) %>% select(-timestep)
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as.POSIXct(timestep, origin = '1995-12-25',tz='UTC')) %>% select(-timestep) %>%
gather(key = varloc, value = value, -datetime)
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as.POSIXct(timestep, origin = '1995-12-25',tz='UTC')) %>% select(-timestep) %>%
gather(key = varloc, value = value, -datetime) %>%
separate(varloc, c("variable", "location"), sep = "_")
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as.POSIXct(timestep, origin = '1995-12-25',tz='UTC')) %>% select(-timestep) %>%
gather(key = varloc, value = value, -datetime) %>%
separate(varloc, c("variable", "location"), sep = "_")
#
dff <- nc_his2df(nc, vars, station_id, layer)
# subsetting nc_his file for locations, layers, variables and time steps
nc_his2df = function(nc, vars, station_id, layer, start = NULL, end = NULL){
require(ncdf4)
# locations
# check availability and raise an error if not
# find index for locs
locs <- ncvar_get(nc, "station_id")
ilocation <- which(locs %in% station_id)
# layers
# check availability and raise an error if not
# find index for layer (obvious)
ilayer = layer
# time steps
# check availability and raise an error if not
# (find index for time steps)  ( for now: all time steps)
time1 = 1
# extract data for variables according to indices
# make start indices in right dimension,
# and number of data steps to retrieve in each dimension (-1 for all data in dimension)
ivars <- expand.grid(vars, ilayer, ilocation, itimestep)
names(ivars) <- c("variable", "layer", "location", "time1")
ivars$variable <- as.character(ivars$variable)
names <- expand.grid(vars, station_id) %>% mutate(name = paste(Var1, Var2, sep = "_")) %>% select(name) %>% unlist()
ivars.list <- split(ivars, seq(nrow(ivars)))
names(ivars.list) = names
# combn <- cross2(ivars.list, vars)
map(ivars.list, ~ c(.x$layer, .x$location))
times <- tibble(timestep = ncvar_get(nc, "time"))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as.POSIXct(timestep, origin = '1995-12-25',tz='UTC')) %>% select(-timestep) %>%
gather(key = varloc, value = value, -datetime) %>%
separate(varloc, c("variable", "location"), sep = "_")
# make list with
# location metadata
# data
# perhaps also model version etc?
}
#
dff <- nc_his2df(nc, vars, station_id, layer)
ggplot(dff, aes(datetime, value))
ggplot(dff, aes(datetime, value)) + geom_point()
ggplot(dff, aes(datetime, value)) + geom_point() + facet_grid(variable ~ location)
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
ncdf4::nc_close(nc = nc)
# colbind_loc_vars <- function(nc, vars = c("station_x_coordinate", "station_y_coordinate", "station_name", "station_id")){
names(vars) = vars
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
ncdf4::nc_close(nc = nc)
runApp('app2/app2.R')
require(ncdf4)
require(tidyverse)
ncdf4::nc_close(nc = nc)
colbind_loc_vars <- function(nc, vars = c("station_x_coordinate", "station_y_coordinate", "station_name", "station_id")){
names(vars) = vars
l <- lapply(vars, function(x) {ncdf4::ncvar_get(nc, x)})
if(length(unique(lapply(l, dim))) == 1){df <- bind_cols(l)} else
stop("not all variables have the same dimension")
return(df)
}
# subsetting nc_his file for locations, layers, variables and time steps
nc_his2df = function(nc, vars, station_id, layer, start = NULL, end = NULL){
require(ncdf4)
# locations
# check availability and raise an error if not
# find index for locs
locs <- ncvar_get(nc, "station_id")
ilocation <- which(locs %in% station_id)
# layers
# check availability and raise an error if not
# find index for layer (obvious)
ilayer = layer
# time steps
# check availability and raise an error if not
# (find index for time steps)  ( for now: all time steps)
time1 = 1
# extract data for variables according to indices
# make start indices in right dimension,
# and number of data steps to retrieve in each dimension (-1 for all data in dimension)
ivars <- expand.grid(vars, ilayer, ilocation, itimestep)
names(ivars) <- c("variable", "layer", "location", "time1")
ivars$variable <- as.character(ivars$variable)
names <- expand.grid(vars, station_id) %>% mutate(name = paste(Var1, Var2, sep = "_")) %>% select(name) %>% unlist()
ivars.list <- split(ivars, seq(nrow(ivars)))
names(ivars.list) = names
# combn <- cross2(ivars.list, vars)
map(ivars.list, ~ c(.x$layer, .x$location))
times <- tibble(timestep = ncvar_get(nc, "time"))
map(ivars.list, ~ ncdf4::ncvar_get(nc, .x$variable, start = c(.x$layer, .x$location, .x$time1), count = c(1, 1, -1))) %>%
bind_rows() %>% bind_cols(times) %>%
mutate(datetime = as.POSIXct(timestep, origin = '1995-12-25',tz='UTC')) %>% select(-timestep) %>%
gather(key = varloc, value = value, -datetime) %>%
separate(varloc, c("variable", "location"), sep = "_")
# make list with
# location metadata
# data
# perhaps also model version etc?
}
#test
con <- "p:/11204882-002-interreg-wadden-sea/simulations/A07_waq_normal_e3_2006_new_obs/DFM_OUTPUT_DCSM-FM_0_5nm_waq/DCSM-FM_0_5nm_waq_0000_his.nc"
nc <- ncdf4::nc_open(con)
runApp('app2/app2.R')
runApp('app2/app2.R')
ncdf4::nc_close(nc = nc1)
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
library(shiny); runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
library(shiny); runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
?observe
runApp('app2/app2.R')
DelwaqR::DelwaqEcoplot2
runApp('app2/app2.R')
runApp('app2/app2.R')
# locations
# check availability and raise an error if not
# find index for locs
locs <- ncvar_get(nc, "station_id")
library(shiny); runApp('app2/app2.R')
